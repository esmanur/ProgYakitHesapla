import sysfrom PyQt4.QtCore import *from PyQt4.QtGui import *import sqlite3#Program uzadığı zaman tek dosyada tutmak zor o yüzden  sınıfa ayrıldıclass AsiStok(QDialog):    def __init__(self,ebeveyn=None): #hangi pencere hangisinin çocuğu ayırt edilmeli. Ana pencere kapandığı zaman çocuk kapatılmamış olabilir.        super(AsiStok,self).__init__(ebeveyn)#pyqt sınıfını başlatmak        #Burada ızgara yapımı oluşturdum, sinyalleri, kaçıncı satır kaçıncı sutunda olucaklarını bütün hepsi bu satırlarda         izgara=QGridLayout() #ızgara olarak tanımlandı#aslında seçimlerde doldurulmamış birşey olursa program yeni bir pencere açarak örn: "Boş bırakılamaz lütfen hayvan türünü seçiniz" diye uyarı çıkarılabilir geliştirilirse#1.satır                izgara.addWidget(QLabel('Hayvan Sahibinin Adı,Soyadı / TC Kimlik Numarası:'),1,0) #addWidget parçacık ekleme özelliği        self.sahipAdSoyad=QLineEdit() #metin kutusu        izgara.addWidget(self.sahipAdSoyad,1,1)        self.sahip_TC=QLineEdit()         izgara.addWidget(self.sahip_TC,1,2)#2.satır               izgara.addWidget(QLabel ('Hayvan Türü/Cinsi:'),2,0)        self.hayvanListe=QComboBox() #seçim kutusu        self.hayvanListe.addItems(["Seçiniz","Kedi","Köpek"])        #self.hayvanListe.currentIndexChanged.connect(self.selectionchange)        izgara.addWidget(self.hayvanListe, 2,1)                self.cinsListe=QComboBox() #aslında burada kedi yada köpek seçimine göre sadece kedi cinsleri yada sadece köpek cinsleri gösterilebilir qombo boxta bir fonksiyonla        self.cinsListe.addItems(["Seçiniz","Scottish Fold","Tekir","Russian Blue","Sarman","....","Golden","Spaniel Cocker","Kangal","Pitbull","Pug","Rottweiller","Boxer","Pekinez","Cavalier King Charles"])        #self.cinsListe.currentIndexChanged.connect(self.selectionchange)        izgara.addWidget(self.cinsListe,2,2)#3.satır        izgara.addWidget(QLabel ('Cinsiyeti:'),3,0) #seçim        self.radioDisi=QRadioButton("Dişi")        izgara.addWidget(self.radioDisi,3,1)        #self.radioDisi.setChecked(True)   , default olarak dişi seçili kalması isteniyorsa açılabilir        #self.radioDisi.toggled.connect(lambda:self.btnstate(self.rad1))                self.radioErkek=QRadioButton("Erkek")        #self.rad2.toggled.connect(lambda:self.btnstate(self.rad2))        izgara.addWidget(self.radioErkek,3,2)    #4.satır                izgara.addWidget(QLabel ('Aşı  Sayısı:'),4,0) #seçim yaparken yanlış rakam girilmemesi için.        self.donerKutu=QSpinBox()        self.donerKutu.setRange(1,2)        #izgara.addWidget(self.donerKutu)        #self.donerKutu.valueChanged.connect(self.valuechange)        izgara.addWidget(self.donerKutu,4,1)#5. satır                izgara.addWidget(QLabel ('Aşı Adı:'),5,0)        self.ilkAsiAdi=QComboBox()        self.ilkAsiAdi.addItems(["Seçiniz","Hipradog DHLP","Defensor 3","Biocan R", "Nobivac Ravies", "Vanguard Plus 5L4", "Nobivac DHPPi+L","Nobivac Tricat"])        #self.ilkAsiAdi.currentIndexChanged.connect(self.selectionchange)        izgara.addWidget(self.ilkAsiAdi, 5,1)                self.ikinciAsiAdi=QComboBox()        self.ikinciAsiAdi.addItems(["2.Aşı Adını Seçiniz","Hipradog DHLP","Defensor 3","Biocan R", "Nobivac Ravies", "Vanguard Plus 5L4", "Nobivac DHPPi+L","Nobivac Tricat"])        #self.ikinciAsiAdi.currentIndexChanged.connect(self.selectionchange)        izgara.addWidget(self.ikinciAsiAdi, 5,2)        #6.satır        izgara.addWidget(QLabel('Aşının/Aşıların Barkodunu Giriniz:'),6,0)        self.birinciAsiBarkod=QLineEdit()        izgara.addWidget(self.birinciAsiBarkod,6,1)        self.ikinciAsiBarkod=QLineEdit()        izgara.addWidget(self.ikinciAsiBarkod,6,2)#7.satır                izgara.addWidget(QLabel('Aşının Son Kullanma Tarihi/Seri Numarası:'),7,0) #tarih seçimi         self.sonKullanma=QDateEdit()        izgara.addWidget(self.sonKullanma,7,1)        self.sonKullanma.setDateTime(QDateTime.currentDateTime())        self.sonKullanma.setMaximumDate(QDate(7999, 12, 28))        self.sonKullanma.setMaximumTime(QTime(23, 59, 59))        self.sonKullanma.setCalendarPopup(True)                self.seri=QLineEdit()        izgara.addWidget(self.seri,7,2)#8.satır                izgara.addWidget(QLabel('İşlem Yapılan Tarih/Aşının Tekrarlanacağı Tarih:'),8,0)        self.islemTarihi=QDateEdit()        izgara.addWidget(self.islemTarihi,8,1)        self.islemTarihi.setDateTime(QDateTime.currentDateTime())        self.islemTarihi.setMaximumDate(QDate(7999, 12, 28))        self.islemTarihi.setMaximumTime(QTime(23, 59, 59))        self.islemTarihi.setCalendarPopup(True)               self.tekrarTarihi=QDateEdit()        izgara.addWidget(self.tekrarTarihi,8,2)        self.tekrarTarihi.setDateTime(QDateTime.currentDateTime())        self.tekrarTarihi.setMaximumDate(QDate(7999, 12, 28))        self.tekrarTarihi.setMaximumTime(QTime(23, 59, 59))        self.tekrarTarihi.setCalendarPopup(True)#9. satır                izgara.addWidget(QLabel('Toplam Ücret:'),9,0)#ücretin girileceği bölüm. elle giriliyor fakat program geliştirilerek kaç adet aşı yapıldıysa tek bir aşının ücretini alarak toplam ücreti programla hesaplatılabilir        self.ucret=QLineEdit()        izgara.addWidget(self.ucret,9,1)        #10. satır burası 1 satır ve 3 sutunu kapsıyor.                    islemiKaydetButton=QPushButton('İşlemi Kaydet') #buraya basınca kaç adet aşı kaldığı müşteri hayvan bilgilerini çıkarıyor        izgara.addWidget(islemiKaydetButton,10,0,1,3)        self.setLayout(izgara)        self.connect(islemiKaydetButton,SIGNAL('pressed()'),self.createTablesAndMore)        #11. satır        izgara.addWidget(QLabel('<font color="red" size="+%d">UYARI:</font>'),11,0)         self.asiSayisi=QLabel('')        izgara.addWidget(self.asiSayisi,12,1)        self.setLayout(izgara)        self.setWindowTitle("Aşı Takip Çizelgesi") #üst tarafta gösterilecek isim        def createTablesAndMore(self):        self.dbBaglanti()# programın her pc' de calışabilmesi icin sadece ilk acilista tablo oluşturma işlemleri         db=self.isaretci.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='asistok'")        #if len(db.fetchall())==0:        try:# tablo oluşumları sadece önemli gördüğüm yerleri ekledim veritabanına, daha fazla bilgi eklenerek program geliştirilebilir.             self.isaretci.execute('''CREATE TABLE sahip(tc_no VARCHAR(11) PRIMARY KEY, adi_soyadi VARCHAR(30) NOT NULL,ucret FLOAT NOT NULL)''')            self.baglanti.commit()            self.isaretci.execute('''CREATE TABLE hayvan(tur VARCHAR(15) NOT NULL, cins VARCHAR(20) NOT NULL, cinsiyet BOOLEAN NOT NULL)''')            self.baglanti.commit()            self.isaretci.execute('''CREATE TABLE asi(asiSayi INTEGER NOT NULL, asiBirIsim VARCHAR(20) NOT NULL, asiIkiIsim VARCHAR(20) NOT NULL)''')            self.baglanti.commit()            self.insertInto()        #else:        except:            self.insertInto()    def dbBaglanti(self):        self.baglanti = sqlite3.connect('asistok.db') #asistok isimli vtbn        self.baglanti.row_factory = sqlite3.Row        self.isaretci = self.baglanti.cursor()    #veri ekleme işlemleri ve bağlantılar.    def insertInto(self):        self.isaretci.execute('''INSERT INTO sahip(tc_no,adi_soyadi,ucret) VALUES (?,?,?)''',(self.sahip_TC.text(),self.sahipAdSoyad.text(),float(self.ucret.text())))        self.baglanti.commit()        self.isaretci.execute('''INSERT INTO hayvan(tur,cins,cinsiyet) VALUES (?,?,?)''',(self.hayvanListe.currentText(),self.cinsListe.currentText(),self.radioDisi.isChecked()))        self.baglanti.commit()        self.isaretci.execute('''INSERT INTO asi(asiSayi, asiBirIsim, asiIkiIsim) VALUES (?,?,?)''',(int(self.donerKutu.text()),self.ilkAsiAdi.currentText(),self.ikinciAsiAdi.currentText()))        self.baglanti.commit()        self.output()#işlemi kaydet butonuna basıldığı zaman programın vereceği yanıt, çıktı    def output(self):        self.asiSayisi.setText(self.sahipAdSoyad.text()+" adlı müşteri "+self.cinsListe.currentText()+" cinsindeki "                               +self.hayvanListe.currentText()+" hayvanına "+self.islemTarihi.text()+" tarihinde "                               +self.ilkAsiAdi.currentText()+" ve "+self.ikinciAsiAdi.currentText()                               +" aşılarını yaptırmıştır. \nToplam ücreti "+self.ucret.text()+" 'dir.\n"                               +self.ilkAsiAdi.currentText()+" aşısından 8 "+self.ikinciAsiAdi.currentText()                               +" aşısından 28 adet kalmıştır.")        #slında ayrı bir pencerede aşı sayısı 10 altında olduğu zaman, "Aşı sayınız azaldı, hemen sipariş vermelisin!" uyarısı çıkartılabilirdi#bu bölüm uygulamanın başlatılmasını, çalışmasını sağlıyor. pencerenin gösterimini sağlıyoruyg=QApplication([]) #nesne içine aktarılacak argümanları alıyor.Qt uygulaması başlatıyorpencere=AsiStok() #tanımlandıpencere.show() #pencerede görünür olması içinuyg.exec_   #uygulamayı başlatmak için